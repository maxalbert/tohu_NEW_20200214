{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tohu \u00b6 TODO: Add a brief overview of the project here. Documentation: Tutorials How-To Guides Discussions Reference Guides Technical reference: API Reference Architectural Decision Records Changelog This documentation structure is based on Daniele Procida's excellent article on the Divio blog.","title":"Tohu"},{"location":"#tohu","text":"TODO: Add a brief overview of the project here. Documentation: Tutorials How-To Guides Discussions Reference Guides Technical reference: API Reference Architectural Decision Records Changelog This documentation structure is based on Daniele Procida's excellent article on the Divio blog.","title":"Tohu"},{"location":"CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Added \u00b6 Added primitive generators: Constant , Integer , HashDigest . Changed \u00b6 Fixed \u00b6 Removed \u00b6 0.1.0 \u00b6 Added \u00b6 Initial project skeleton.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#added","text":"Added primitive generators: Constant , Integer , HashDigest .","title":"Added"},{"location":"CHANGELOG/#changed","text":"","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"","title":"Removed"},{"location":"CHANGELOG/#010","text":"","title":"0.1.0"},{"location":"CHANGELOG/#added_1","text":"Initial project skeleton.","title":"Added"},{"location":"ADRs/","text":"What are ADRs? \u00b6 Architectural Decision Records (ADR's) provide a lightweight format for documenting the reasons why certain architectural or technical decisions were taken, and more importantly the context which led to these decisions. This allows to revisit these decisions later on, in case the context changes or more information becomes available. See Michael Nygard's blog post for more details on ADR's. Despite the name \"architectural decision records\", where appropriate it is also encouraged to document technological decisions (for example which Javascript framework to use for a web frontend) or \"cultural\" decisions. ADR's should be placed in sepearate files that are numbered sequentially (e.g. 0001-some-useful-description.md ). The contents should follow this template : Title: short present tense imperative phrase, less than 50 characters, like a git commit message. Date: when was this issue discussed (to give approximate temporal context) Status: proposed, accepted, rejected, deprecated, superseded, etc. Context: what is the issue that we're seeing that is motivating this decision or change. This section describes the forces at play, including technological, political, social, and project local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts. Decision: what is the change that we're actually proposing or doing (describes our response to these forces) Consequences: what becomes easier or more difficult to do because of this change. All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.","title":"What are ADRs?"},{"location":"ADRs/#what-are-adrs","text":"Architectural Decision Records (ADR's) provide a lightweight format for documenting the reasons why certain architectural or technical decisions were taken, and more importantly the context which led to these decisions. This allows to revisit these decisions later on, in case the context changes or more information becomes available. See Michael Nygard's blog post for more details on ADR's. Despite the name \"architectural decision records\", where appropriate it is also encouraged to document technological decisions (for example which Javascript framework to use for a web frontend) or \"cultural\" decisions. ADR's should be placed in sepearate files that are numbered sequentially (e.g. 0001-some-useful-description.md ). The contents should follow this template : Title: short present tense imperative phrase, less than 50 characters, like a git commit message. Date: when was this issue discussed (to give approximate temporal context) Status: proposed, accepted, rejected, deprecated, superseded, etc. Context: what is the issue that we're seeing that is motivating this decision or change. This section describes the forces at play, including technological, political, social, and project local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts. Decision: what is the change that we're actually proposing or doing (describes our response to these forces) Consequences: what becomes easier or more difficult to do because of this change. All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.","title":"What are ADRs?"},{"location":"discussions/","text":"Introduction \u00b6 This section contains discussions . A discussion: is understanding-oriented explains provides background and context (See here for context and more information.)","title":"Introduction"},{"location":"discussions/#introduction","text":"This section contains discussions . A discussion: is understanding-oriented explains provides background and context (See here for context and more information.)","title":"Introduction"},{"location":"discussions/how_is_this_different_from_xyz/","text":"How is tohu different from XYZ? \u00b6 TODO: Write me!","title":"How is tohu different from XYZ?"},{"location":"discussions/how_is_this_different_from_xyz/#how-is-tohu-different-from-xyz","text":"TODO: Write me!","title":"How is tohu different from XYZ?"},{"location":"how_to_guides/","text":"Introduction \u00b6 This section contains how-to guides . A how-to guide: is goal-oriented shows how to solve a specific problem is a series of steps (See here for context and more information.)","title":"Introduction"},{"location":"how_to_guides/#introduction","text":"This section contains how-to guides . A how-to guide: is goal-oriented shows how to solve a specific problem is a series of steps (See here for context and more information.)","title":"Introduction"},{"location":"how_to_guides/installation/","text":"Installing tohu \u00b6 You can install the latest release by running: $ pip install -U tohu You can also grab the latest development version directly from GitHub: $ pip install git+https://github.com/maxalbert/tohu","title":"Installing tohu"},{"location":"how_to_guides/installation/#installing-tohu","text":"You can install the latest release by running: $ pip install -U tohu You can also grab the latest development version directly from GitHub: $ pip install git+https://github.com/maxalbert/tohu","title":"Installing tohu"},{"location":"how_to_guides/running_the_tests/","text":"Running the tests \u00b6 $ poetry run pytest Example output: ============================= test session starts ============================== platform linux -- Python 3.8.1, pytest-3.10.1, py-1.8.0, pluggy-0.13.0 rootdir: /path/to/code/tohu, inifile: collected 1 item tests/test_tohu.py . [100%] =========================== 1 passed in 0.11 seconds ===========================","title":"Running the tests"},{"location":"how_to_guides/running_the_tests/#running-the-tests","text":"$ poetry run pytest Example output: ============================= test session starts ============================== platform linux -- Python 3.8.1, pytest-3.10.1, py-1.8.0, pluggy-0.13.0 rootdir: /path/to/code/tohu, inifile: collected 1 item tests/test_tohu.py . [100%] =========================== 1 passed in 0.11 seconds ===========================","title":"Running the tests"},{"location":"how_to_guides/setting_up_dev_environment/","text":"Setting up a development environment \u00b6 tohu uses poetry for dependency management, so make sure you have it installed . Next, install the necessary dependencies for tohu . We specify the --extras options to install the complete set of packages for a full development environment. $ poetry install --extras \"develop testing docs deploy\"","title":"Setting up a development environment"},{"location":"how_to_guides/setting_up_dev_environment/#setting-up-a-development-environment","text":"tohu uses poetry for dependency management, so make sure you have it installed . Next, install the necessary dependencies for tohu . We specify the --extras options to install the complete set of packages for a full development environment. $ poetry install --extras \"develop testing docs deploy\"","title":"Setting up a development environment"},{"location":"reference_guides/","text":"Introduction \u00b6 This section contains reference guides . A reference guide: is information-oriented describes the machinery is accurate and complete (See here for context and more information.)","title":"Introduction"},{"location":"reference_guides/#introduction","text":"This section contains reference guides . A reference guide: is information-oriented describes the machinery is accurate and complete (See here for context and more information.)","title":"Introduction"},{"location":"reference_guides/Primitive_generators/","text":"Primitive generators \u00b6 This section demonstrates the primitive generators supported in tohu . from tohu.primitive_generators import * from tohu.utils import print_generated_sequence Constant \u00b6 g = Constant ( \"quux\" ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: quux, quux, quux, quux, quux, quux, quux, quux, quux, quux Integer \u00b6 g = Integer ( low = 100 , high = 200 ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 115, 139, 164, 183, 194, 130, 145, 152, 125, 132 HashDigest \u00b6 The HashDigest generator produces a sequence of hex strings representing hash digest values. By default, the generator produces hex strings of the specified length (which in this case must be even). g = HashDigest ( length = 6 ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 4B4D02, 9097BC, EC6DF8, B3E6CA, EE19B1, 9FC0B7, 6F07A1, AC5918, 91FA77, F863C5 Instead of hex strings, the generator can produce the equivalent byte strings by setting as_bytes=True . g = HashDigest ( length = 3 , as_bytes = True ) print_generated_sequence ( g , 5 , seed = 99999 , sep = \" \\n \" ) Generated sequence: b'KM\\x02' b'\\x90\\x97\\xbc' b'\\xecm\\xf8' b'\\xb3\\xe6\\xca' b'\\xee\\x19\\xb1' The lowercase keyword can be used to produce hex strings with lowercase characters (note this has no effect when as_bytes=True ). g = HashDigest ( length = 8 , lowercase = True ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 4b4d0235, 9097bc5e, ec6df8fc, b3e6caf3, ee19b1d3, 9fc0b7fd, 6f07a116, ac591849, 91fa77c5, f863c55d","title":"Primitive generators"},{"location":"reference_guides/Primitive_generators/#primitive-generators","text":"This section demonstrates the primitive generators supported in tohu . from tohu.primitive_generators import * from tohu.utils import print_generated_sequence","title":"Primitive generators"},{"location":"reference_guides/Primitive_generators/#constant","text":"g = Constant ( \"quux\" ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: quux, quux, quux, quux, quux, quux, quux, quux, quux, quux","title":"Constant"},{"location":"reference_guides/Primitive_generators/#integer","text":"g = Integer ( low = 100 , high = 200 ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 115, 139, 164, 183, 194, 130, 145, 152, 125, 132","title":"Integer"},{"location":"reference_guides/Primitive_generators/#hashdigest","text":"The HashDigest generator produces a sequence of hex strings representing hash digest values. By default, the generator produces hex strings of the specified length (which in this case must be even). g = HashDigest ( length = 6 ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 4B4D02, 9097BC, EC6DF8, B3E6CA, EE19B1, 9FC0B7, 6F07A1, AC5918, 91FA77, F863C5 Instead of hex strings, the generator can produce the equivalent byte strings by setting as_bytes=True . g = HashDigest ( length = 3 , as_bytes = True ) print_generated_sequence ( g , 5 , seed = 99999 , sep = \" \\n \" ) Generated sequence: b'KM\\x02' b'\\x90\\x97\\xbc' b'\\xecm\\xf8' b'\\xb3\\xe6\\xca' b'\\xee\\x19\\xb1' The lowercase keyword can be used to produce hex strings with lowercase characters (note this has no effect when as_bytes=True ). g = HashDigest ( length = 8 , lowercase = True ) print_generated_sequence ( g , 10 , seed = 99999 ) Generated sequence: 4b4d0235, 9097bc5e, ec6df8fc, b3e6caf3, ee19b1d3, 9fc0b7fd, 6f07a116, ac591849, 91fa77c5, f863c55d","title":"HashDigest"},{"location":"tutorials/","text":"Introduction \u00b6 This section contains Tutorials . A tutorial: is learning-oriented allows the newcomer to get started is a lesson (See here for context and more information.)","title":"Introduction"},{"location":"tutorials/#introduction","text":"This section contains Tutorials . A tutorial: is learning-oriented allows the newcomer to get started is a lesson (See here for context and more information.)","title":"Introduction"},{"location":"tutorials/first_steps/","text":"First steps \u00b6 This is an example Jupyter notebook which will be included as a tutorial in the documentation. The function dummy_function simply computes the square of any input argument it receives. Let's see how this works: from tohu import dummy_function print ( dummy_function ( 2 )) print ( dummy_function ( 3 )) print ( dummy_function ( 4 )) print ( dummy_function ( 5 )) 4 9 16 25","title":"First steps"},{"location":"tutorials/first_steps/#first-steps","text":"This is an example Jupyter notebook which will be included as a tutorial in the documentation. The function dummy_function simply computes the square of any input argument it receives. Let's see how this works: from tohu import dummy_function print ( dummy_function ( 2 )) print ( dummy_function ( 3 )) print ( dummy_function ( 4 )) print ( dummy_function ( 5 )) 4 9 16 25","title":"First steps"}]}